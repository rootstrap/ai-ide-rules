---
description:
globs: *.ts,*.tsx
alwaysApply: false
---
# React Performance Best Practices

## 1. Memoization
- **Use `React.memo`:** Wrap pure functional components to prevent unnecessary re-renders.
- **Use `useMemo` and `useCallback`:** Memoize expensive calculations and stable callbacks, but avoid overusing them for trivial values.

## 2. Avoid Unnecessary Re-renders
- **Lift state wisely:** Only lift state up when truly shared; colocate state as much as possible.
- **Stable props:** Pass stable references (memoized functions/objects) to child components to avoid triggering re-renders.
- **Key props:** Use stable and unique keys for list items to help React optimize rendering.

## 3. Lazy Loading & Code Splitting
- **Use `React.lazy` and `Suspense`:** Dynamically load components to reduce initial bundle size.
- **Split code at route and component level:** Use dynamic imports for large or infrequently used components.

## 4. Bundle Size Optimization
- **Tree shaking:** Prefer ES module imports to enable tree shaking.
- **Import only what you need:** Avoid importing entire libraries; import specific functions/components.
- **Analyze bundle:** Use tools like Webpack Bundle Analyzer or Source Map Explorer to monitor bundle size.

## 5. Efficient Lists
- **Windowing/virtualization:** Use libraries like `react-window` or `react-virtualized` for large lists.
- **Pagination:** Paginate data when possible to avoid rendering large lists at once.

## 6. Expensive Computations
- **Move heavy work outside render:** Perform expensive calculations outside of render or in web workers if possible.
- **Debounce/throttle:** Debounce or throttle frequent updates (e.g., input handlers, scroll events).

## 7. Profiling & Monitoring
- **React DevTools Profiler:** Regularly profile components to identify performance bottlenecks.
- **Performance budgets:** Set and monitor performance budgets for key metrics (e.g., TTI, FCP).

## 8. Images & Media
- **Optimize images:** Use responsive images, lazy loading, and modern formats (WebP, AVIF).
- **Defer non-critical media:** Load heavy media assets only when needed.

## 9. Avoid Anti-patterns
- **No inline functions/objects in render:** Avoid creating new functions or objects in render unless necessary.
- **No heavy work in render:** Never perform expensive operations directly in the render body.

## 10. General
- **Continuous review:** Regularly review and refactor for performance as the app grows.
- **Educate team:** Share performance learnings and patterns with the team.
