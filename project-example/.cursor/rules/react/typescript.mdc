---
description: Typescript best practices and conventions
globs: *.tsx,*.ts
alwaysApply: false
---
# Rules to follow when writing Typescript code

- Always use Typescript over Javascript
- Avoid using `any` type. Use more specific types or `unknown` if necessary.
- Ensure all variables and function parameters have explicit types to avoid implicit `any`.
- Use `camelCase` for variables and functions.
- Use `PascalCase` for classes, interfaces, and type aliases.
- Prefix interfaces with `I` (e.g., `IUser`) or use a suffix like `Props` for React component props.
- Always annotate function return types.
- Use type inference where possible, but explicitly annotate complex types.
- Prefer using `type` over `interface`
- Avoid using the non-null assertion operator (`!`). Instead, handle potential `null` or `undefined` values explicitly.
- Use `readonly` for properties that should not change after initialization.
- Prefer `const` over `let` for variables that do not change.
- Avoid nested ternaries when possible
- Use union types to represent a value that can be one of several types.
- Use intersection types to combine multiple types into one.
- Avoid using enums; prefer union types (`'primary' | 'secondary'`)
- Use ES6 module syntax (`import`/`export`) consistently.
- Group and order imports logically (e.g., external libraries, internal modules, styles).
- Use JSDoc comments to document complex functions and classes.
- Always use double quotes